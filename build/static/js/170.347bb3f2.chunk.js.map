{"version":3,"file":"static/js/170.347bb3f2.chunk.js","mappings":"w91CAEA,6CAWqBA,EAAAA,WAAAA,SAAAA,KAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,OAAAA,eAAAA,KAAAA,EAAAA,CAAAA,UAAAA,EAAAA,MACJC,EAAAA,IAAAA,OAAAA,eAAAA,KAAAA,EAAAA,CAAAA,UAAAA,EAAAA,MAKDA,EAAAA,GAAAA,CAiFX,OAjFWA,EAAAA,EAAAA,GAAAA,EAAAA,CAAAA,CAAAA,IAAAA,YAAAA,IAJZ,WACI,OAAO,OAAAC,KAAP,KACH,uBAGD,WACI,OAAO,OAAAA,KAAP,KACH,oCAED,WACI,IACI,IAAMC,EAAmBC,KAAKC,MAAMC,aAAaC,QAAQ,qBACzD,IAAKJ,EAAkB,MAAM,IAAIK,MAAM,uBACvC,OAAOL,CAIV,CAHC,MAAMM,GAEJ,OADAH,aAAaI,QAAQ,mBAAoBN,KAAKO,WAAL,OAAeT,KAAf,SAClC,OAAAA,KAAP,KACH,CACJ,oCAED,SAAoBU,GAChBN,aAAaI,QAAQ,mBAAoBN,KAAKO,UAAUC,GAC3D,+BAED,WACI,IACI,IAAMC,EAAc,IAAIC,IAAIV,KAAKC,MAAMC,aAAaC,QAAQ,iBAC5D,IAAKM,EAAa,MAAM,IAAIL,MAAM,0BAClC,OAAOK,CAIV,CAHC,MAAMJ,GAEJ,OADAH,aAAaI,QAAQ,cAAe,MAC7B,IAAII,GACd,CACJ,yBAED,WACI,IAAIC,EACJ,IAEI,KADAA,EAAYX,KAAKC,MAAMC,aAAaC,QAAQ,WAC5B,MAAM,IAAIC,MAAM,uBAKnC,CAJC,MAAMC,GACJO,QAAQC,MAAMR,GACdM,EAtDD,CACHG,UAAW,GACXC,aAAc,GACdC,UAAW,CACPC,QAAS,EACTC,MAAO,IAkDPhB,aAAaI,QAAQ,QAASN,KAAKO,UAAUI,GAChD,CACD,OAAOA,CACV,+BAED,WACI,IACI,IAAMQ,EAAcnB,KAAKC,MAAMC,aAAaC,QAAQ,YACpD,IAAKgB,EAAa,MAAM,IAAIf,MAAM,0BAClC,OAAOe,CAIV,CAHC,MAAMd,GAEJ,OADAH,aAAaI,QAAQ,UAAW,MACzB,EACV,CACJ,iCAED,WACIJ,aAAaI,QAAQ,cAAe,KACvC,yBAED,SAASc,GACLlB,aAAaI,QAAQ,QAASN,KAAKO,UAC/Bc,OAAOC,OAAOxB,KAAKyB,WAAYH,IAEtC,6BAED,WACIlB,aAAaI,QAAQ,QAASN,KAAKO,UAlFhC,CACHO,UAAW,GACXC,aAAc,GACdC,UAAW,CACPC,QAAS,EACTC,MAAO,KA8Ed,8BAED,SAAcM,GACVtB,aAAaI,QAAQ,cAAeN,KAAKO,UAAUiB,GACtD,4BAED,SAAYC,GACR,IAAMN,EAAcrB,KAAK4B,iBACzBP,EAAYQ,KAAZ,MAAAR,GAAW,OAASM,IACpBvB,aAAaI,QAAQ,UAAWN,KAAKO,UAAUY,GAClD,2BAED,SAAWA,GACPjB,aAAaI,QAAQ,UAAWN,KAAKO,UAAUY,GAClD,OAvFgBvB,E,uFCVfgC,EAAgB,CAClBC,WAAY,kBACZC,MAAO,oBACPC,mBAAmB,GAGjBC,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAGD,OAHCA,EAAAA,EAAAA,GAAAA,EAAAA,KAAAA,CAAAA,CAAAA,IAAAA,OAAAA,MACF,WAA0B,IAAdC,EAAa,uDAAJ,CAAC,EAClBnC,KAAKoC,KAAKb,OAAOC,OAAOM,EAAeK,GAC1C,OAHCD,C,MAAaG,GAAiBC,IAMpC,K","sources":["service/StorageInterface.js","service/Swal.js"],"sourcesContent":["import glossary from './glossary.json';\r\n\r\nconst zeroStats = () => {\r\n    return {\r\n        misstakes: [],\r\n        solutionTime: [],\r\n        wordCount: {\r\n            correct: 0,\r\n            wrong: 0\r\n        }\r\n    };\r\n};\r\n\r\nexport default class StorageInterface {\r\n    #wordTypes = glossary.wordTypes;\r\n    get wordTypes() { \r\n        return this.#wordTypes; \r\n    }\r\n\r\n    #allTasks = glossary.tasks;\r\n    get allTasks() { \r\n        return this.#allTasks;\r\n    }\r\n\r\n    getCurrentWordTypes() {\r\n        try {\r\n            const currentWordTypes = JSON.parse(localStorage.getItem('currentWordTypes'));\r\n            if (!currentWordTypes) throw new Error('Incorrect Wordtypes');\r\n            return currentWordTypes;\r\n        } catch(e) {\r\n            localStorage.setItem('currentWordTypes', JSON.stringify(this.#wordTypes));\r\n            return this.#wordTypes;\r\n        }\r\n    }\r\n\r\n    setCurrentWordTypes(wordTypes) {\r\n        localStorage.setItem('currentWordTypes', JSON.stringify(wordTypes));\r\n    }\r\n\r\n    getTasksPassed() {\r\n        try {\r\n            const tasksPassed = new Set(JSON.parse(localStorage.getItem('tasksPassed')));\r\n            if (!tasksPassed) throw new Error('Incorrect tasks passed');\r\n            return tasksPassed;\r\n        } catch(e) {\r\n            localStorage.setItem('tasksPassed', '[]');\r\n            return new Set();\r\n        }\r\n    }\r\n\r\n    getStats() {\r\n        let statsData;\r\n        try {\r\n            statsData = JSON.parse(localStorage.getItem('stats'));\r\n            if (!statsData) throw new Error('Incorrect stats data');\r\n        } catch(e) {\r\n            console.error(e)\r\n            statsData = zeroStats();\r\n            localStorage.setItem('stats', JSON.stringify(statsData));\r\n        }\r\n        return statsData;\r\n    }\r\n\r\n    getHistoryData() {\r\n        try {\r\n            const historyData = JSON.parse(localStorage.getItem('history'));\r\n            if (!historyData) throw new Error('Incorrect history data');\r\n            return historyData;\r\n        } catch(e) {\r\n            localStorage.setItem('history', '[]');\r\n            return [];\r\n        }\r\n    }\r\n\r\n    clearTasksPassed() {\r\n        localStorage.setItem('tasksPassed', '[]');\r\n    }\r\n\r\n    setStats(stats) {\r\n        localStorage.setItem('stats', JSON.stringify(\r\n            Object.assign(this.getStats(), stats)\r\n        ));\r\n    }\r\n\r\n    setZeroStats() {\r\n        localStorage.setItem('stats', JSON.stringify(zeroStats()));\r\n    }\r\n\r\n    addPassedTask(tasks) {\r\n        localStorage.setItem('tasksPassed', JSON.stringify(tasks));\r\n    }\r\n\r\n    pushHistory(words) {\r\n        const historyData = this.getHistoryData();\r\n        historyData.push(...words);\r\n        localStorage.setItem('history', JSON.stringify(historyData));\r\n    }\r\n\r\n    setHistory(historyData) {\r\n        localStorage.setItem('history', JSON.stringify(historyData));\r\n    }\r\n}","import * as SwalBare from 'sweetalert2';\r\nimport withReactContent from 'sweetalert2-react-content';\r\n\r\nconst defaultParams = {\r\n    background: 'var(--bg-color)',\r\n    color: 'var(--font-color)',\r\n    showConfirmButton: false\r\n};\r\n\r\nclass Swal extends withReactContent(SwalBare) {\r\n    static show(params = {}) {\r\n        this.fire(Object.assign(defaultParams, params));\r\n    }\r\n}\r\n\r\nexport default Swal;"],"names":["StorageInterface","glossary","this","currentWordTypes","JSON","parse","localStorage","getItem","Error","e","setItem","stringify","wordTypes","tasksPassed","Set","statsData","console","error","misstakes","solutionTime","wordCount","correct","wrong","historyData","stats","Object","assign","getStats","tasks","words","getHistoryData","push","defaultParams","background","color","showConfirmButton","Swal","params","fire","withReactContent","SwalBare"],"sourceRoot":""}